
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__ip_h__PROXY_MARSHAL_H
#define __dbusxx__ip_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace net {
namespace connman {

class Service_proxy
: public ::DBus::InterfaceProxy
{
public:

    Service_proxy()
    : ::DBus::InterfaceProxy("net.connman.Service")
    {
        connect_signal(Service_proxy, PropertyChanged, _PropertyChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void SetProperty(const std::string& name, const ::DBus::Variant& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << value;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    void ClearProperty(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("ClearProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    void Connect()
    {
        ::DBus::CallMessage call;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
    }

    void Disconnect()
    {
        ::DBus::CallMessage call;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
    }

    void Remove()
    {
        ::DBus::CallMessage call;
        call.member("Remove");
        ::DBus::Message ret = invoke_method (call);
    }

    void MoveBefore(const ::DBus::Path& service)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << service;
        call.member("MoveBefore");
        ::DBus::Message ret = invoke_method (call);
    }

    void MoveAfter(const ::DBus::Path& service)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << service;
        call.member("MoveAfter");
        ::DBus::Message ret = invoke_method (call);
    }

    void ResetCounters()
    {
        ::DBus::CallMessage call;
        call.member("ResetCounters");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& name, const ::DBus::Variant& value) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        ::DBus::Variant value;
        ri >> value;
        PropertyChanged(name, value);
    }
};

} } 
#endif //__dbusxx__ip_h__PROXY_MARSHAL_H
