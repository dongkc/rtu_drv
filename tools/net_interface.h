
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__net_interface_h__PROXY_MARSHAL_H
#define __dbusxx__net_interface_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace net {
namespace connman {

class Manager_proxy
: public ::DBus::InterfaceProxy
{
public:

    Manager_proxy()
    : ::DBus::InterfaceProxy("net.connman.Manager")
    {
        connect_signal(Manager_proxy, PropertyChanged, _PropertyChanged_stub);
        connect_signal(Manager_proxy, TechnologyAdded, _TechnologyAdded_stub);
        connect_signal(Manager_proxy, TechnologyRemoved, _TechnologyRemoved_stub);
        connect_signal(Manager_proxy, ServicesChanged, _ServicesChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void SetProperty(const std::string& name, const ::DBus::Variant& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << value;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > > GetTechnologies()
    {
        ::DBus::CallMessage call;
        call.member("GetTechnologies");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > > argout;
        ri >> argout;
        return argout;
    }

    void RemoveProvider(const ::DBus::Path& provider)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << provider;
        call.member("RemoveProvider");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > > GetServices()
    {
        ::DBus::CallMessage call;
        call.member("GetServices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path ConnectProvider(const std::map< std::string, ::DBus::Variant >& provider)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << provider;
        call.member("ConnectProvider");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void RegisterAgent(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("RegisterAgent");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnregisterAgent(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("UnregisterAgent");
        ::DBus::Message ret = invoke_method (call);
    }

    void RegisterCounter(const ::DBus::Path& path, const uint32_t& accuracy, const uint32_t& period)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        wi << accuracy;
        wi << period;
        call.member("RegisterCounter");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnregisterCounter(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("UnregisterCounter");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Path CreateSession(const std::map< std::string, ::DBus::Variant >& settings, const ::DBus::Path& notifier)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << settings;
        wi << notifier;
        call.member("CreateSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void DestroySession(const ::DBus::Path& session)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << session;
        call.member("DestroySession");
        ::DBus::Message ret = invoke_method (call);
    }

    /* 
    void RequestPrivateNetwork(::DBus::Path& path, std::map< std::string, ::DBus::Variant >& settings, & socket)
    {
        ::DBus::CallMessage call;
        call.member("RequestPrivateNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> path;
        ri >> settings;
        ri >> socket;
    }
    */

    void ReleasePrivateNetwork(const ::DBus::Path& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("ReleasePrivateNetwork");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& name, const ::DBus::Variant& value) = 0;
    virtual void TechnologyAdded(const ::DBus::Path& path, const std::map< std::string, ::DBus::Variant >& properties) = 0;
    virtual void TechnologyRemoved(const ::DBus::Path& path) = 0;
    virtual void ServicesChanged(const std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > >& changed, const std::vector< ::DBus::Path >& removed) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        ::DBus::Variant value;
        ri >> value;
        PropertyChanged(name, value);
    }
    void _TechnologyAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        std::map< std::string, ::DBus::Variant > properties;
        ri >> properties;
        TechnologyAdded(path, properties);
    }
    void _TechnologyRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path path;
        ri >> path;
        TechnologyRemoved(path);
    }
    void _ServicesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< ::DBus::Struct< ::DBus::Path, std::map< std::string, ::DBus::Variant > > > changed;
        ri >> changed;
        std::vector< ::DBus::Path > removed;
        ri >> removed;
        ServicesChanged(changed, removed);
    }
};

} } 
namespace net {
namespace connman {

class Clock_proxy
: public ::DBus::InterfaceProxy
{
public:

    Clock_proxy()
    : ::DBus::InterfaceProxy("net.connman.Clock")
    {
        connect_signal(Clock_proxy, PropertyChanged, _PropertyChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void SetProperty(const std::string& name, const ::DBus::Variant& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << value;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& name, const ::DBus::Variant& value) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        ::DBus::Variant value;
        ri >> value;
        PropertyChanged(name, value);
    }
};

} } 
#endif //__dbusxx__net_interface_h__PROXY_MARSHAL_H
