//////////////////////////////////////////////////////////////////////////////
// Model: rtu.qm
// File:  ./qpobject.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//////////////////////////////////////////////////////////////////////////////
// @(/2/3) ...................................................................
#include "qp_port.h"
#include "dpp.h"
#include "bsp.h"

namespace Zebra {

int qpRun(void)
{

    static QP::QEvt const *modbusQueue[50000];
    static QP::QSubscrList l_subscrSto[MAX_PUB_SIG];

    static QF_MPOOL_EL(TableEvt) l_smlPoolSto[100];            // small pool

    QP::QF::init();

    BSP_init();

    QS_OBJ_DICTIONARY(l_smlPoolSto);
    QS_OBJ_DICTIONARY(modbusQueue);

    QP::QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));

    QP::QF::poolInit(l_smlPoolSto,
                     sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    AO_Modbus->start((uint8_t)(1),
                    modbusQueue, Q_DIM(modbusQueue),
                    (void *)0, 1024, (QP::QEvt *)0);

    return QP::QF::run();
}

}  // namespace Zebra

