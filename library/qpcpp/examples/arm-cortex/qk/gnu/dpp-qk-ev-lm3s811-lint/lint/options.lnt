//////////////////////////////////////////////////////////////////////////////
// Product: PC-Lint 9.x option file for QP/C++ applications, GNU-ARM compiler
// Last Updated for Version: 4.4.00
// Date of the Last Update:  Apr 19, 2012
//
//                    Q u a n t u m     L e a P s
//                    ---------------------------
//                    innovating embedded systems
//
// Copyright (C) 2002-2012 Quantum Leaps, LLC. All rights reserved.
//
// This software may be distributed and modified under the terms of the GNU
// General Public License version 2 (GPL) as published by the Free Software
// Foundation and appearing in the file GPL.TXT included in the packaging of
// this file. Please note that GPL Section 2[b] requires that all works based
// on this software must also be made publicly available under the terms of
// the GPL ("Copyleft").
//
// Alternatively, this software may be distributed and modified under the
// terms of Quantum Leaps commercial licenses, which expressly supersede
// the GPL and are specifically designed for licensees interested in
// retaining the proprietary status of their code.
//
// Contact information:
// Quantum Leaps Web site:  http://www.quantum-leaps.com
// e-mail:                  info@quantum-leaps.com
//////////////////////////////////////////////////////////////////////////////

// the location of the GNU ARM includes (need to adjust!!!)
-iC:\tools\CodeSourcery\arm-none-eabi\include

// the location of the QTools lint directory (need to adjust!!!)
-iC:\tools\qtools\lint

-i%QPCPP%\include                 // QP/C++ includes
-i%QPCPP%\ports\arm-cortex\qk\gnu // QP/C++ port includes (GNU-ARM)
-i..\cmsis                    // CMSIS directory
-i..\display                  // display driver

co-gnu-arm.lnt                // GNU ARM compiler
au-misra-cpp.lnt              // MISRA-C++:2008 rules
au-ds.lnt                     // Dan Saks recommendations
lib-qpcpp.lnt                 // QP/C++ options
//-strong(AXJ)                  // Strong type checking

// library headers
-wlib(1)                      // ignore warnings from library headers
+libclass(angle)              // consider only <...> headers as library
+libdir(..\cmsis)
+libdir(..\display)
//-vf                           // print names of all header & source files

-esym(1960, philoNum)         // Non-private data member in a non-POD struct
-efunc(946, *PHILO_ID)        // 5-0-15,5-0-17,5-0-18 subtraction of pointers
-efunc(947, *PHILO_ID)        // 5-0-15,5-0-17,5-0-18 subtraction of pointers
-efunc(1960,*PHILO_ID)        // 5-0-6, conversion of integer to smaller type
-efile(1924, *bsp.cpp)        // 5-2-4, C-style cast
-emacro(717,                  // do ... while(0);
 QK_ISR_ENTRY,
 QK_ISR_EXIT)

// CMSIS-induced problems
-e923                         // 5-2-7, 5-2-8 cast from int to pointer
-e1924                        // C-style cast (for CMSIS)

// not referenced symbols
-e714                         // symbol '...' not referenced
-e755                         // global macro '...' not referenced
-e756                         // global typedef '...' not referenced
-e757                         // global declarator '...' not referenced
-e768                         // struct member '...' not referenced
-e551                         // symbol '...' not accessed
